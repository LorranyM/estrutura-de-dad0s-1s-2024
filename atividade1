#include <stdio.h>
#include <stdlib.h>

// Função para comparar dois inteiros (necessária para qsort)
int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

int main(int argc, char *argv[]) {
    // Verifica se nenhum número foi fornecido como argumento
    if (argc == 1) {
        printf("Erro: Nenhum número informado.\n");
        return 1;
    }

    // Número de elementos é o número de argumentos menos 1 (o nome do programa)
    int n = argc - 1;
    int *numero = (int*)malloc(n * sizeof(int)); // Aloca memória para armazenar os números
    if (numero == NULL) {
        printf("Erro: Falha na alocação de memória.\n");
        return 1;
    }

    // Lê os números fornecidos como argumentos
    for (int i = 0; i < n; i++) {
        numero[i] = atoi(argv[i + 1]); // Converte o argumento para inteiro
    }

    // Calcula a soma, o menor e o maior número
    double sum = 0.0;
    int min = numero[0];
    int max = numero[0];
    for (int i = 0; i < n; i++) {
        sum += numero[i];
        if (numero[i] < min) {
            min = numero[i];
        }
        if (numero[i] > max) {
            max = numero[i];
        }
    }

    // Calcula o valor médio dos números
    double average = sum / n;

    // Ordena os números em ordem crescente
    qsort(numero, n, sizeof(int), compare);

    // Imprime os resultados
    printf("Quantidade de números recebidos: %d\n", n);
    printf("Valor médio dos números: %.1f\n", average);
    printf("Menor número: %d\n", min);
    printf("Maior número: %d\n", max);
    printf("Números em ordem crescente:");
    for (int i = 0; i < n; i++) {
        printf(" %d", numero[i]);
    }
    printf("\n");

    // Libera a memória alocada
    free(numero);

    return 0;
}
